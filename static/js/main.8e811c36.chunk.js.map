{"version":3,"sources":["marks/BoldMark.js","marks/CodeMark.js","styles/fonts.js","nodes/CodeNode.js","nodes/NonExecutableCodeNode.js","nodes/SampleOutput.js","marks/HotKeys.js","plugins/codePlugin.js","styles/palette.js","components/Buttons.js","toolbars/FormatToolBar.js","marks/ItalicMark.js","components/FormElements.js","toolbars/BlocksToolbar.js","components/Image.js","nodes/ImageNode.js","serializers/HtmlSerializer.js","toolbars/ExportToolbar.js","Viewer.js","consts.js","nodes/NoteNode.js","toolbars/DataToolbar.js","App.js","plugins/listPlugin.js","plugins/notePlugin.js","plugins/alignPlugin.js","serviceWorker.js","index.js"],"names":["BoldMark","props","children","attributes","react_default","a","createElement","CodeMark","InlineCode","styled","code","_templateObject","fontFamilies","CodeNode","Pre","Code","CodeNode_templateObject","pre","_templateObject2","NonExecutableCodeNode","NonExecutableCodeNode_Pre","NonExecutableCodeNode_Code","NonExecutableCodeNode_templateObject","NonExecutableCodeNode_templateObject2","SampleOutput","SampleOutput_Pre","Samp","samp","SampleOutput_templateObject","SampleOutput_templateObject2","options","type","key","MarkHotKey","palette","Button","button","Buttons_templateObject","BlockButton","Buttons_templateObject2","InlineButton","_templateObject3","PrimaryButton","_templateObject4","FormatToolbar","editor","FormatToolbarWrapper","className","index_es","icon","faBold","onClick","toggleMark","focus","faItalic","faCode","faAlignLeft","alignLeft","faAlignCenter","alignCenter","faAlignRight","alignRight","div","FormatToolBar_templateObject","ItalicMark","Input","input","FormElements_templateObject","InlineForm","FormElements_templateObject2","BlocksToolbar","onChange","BlocksToolbarWrapper","isList","isBlockEmpty","insertBlock","unwrapList","setBlocks","faParagraph","faCircle","size","inverse","faChevronCircleRight","moveToEndOfBlock","faHeading","reactjs_popup_es","modal","trigger","faImage","close","BlocksToolbar_InsertImagePopup","Object","assign","closePopup","e","preventDefault","insertUnorderedList","faListUl","faListOl","insertOrderedList","faStickyNote","insertNote","faTable","insertTable","isSelectionInTable","Fragment","removeTable","insertRow","removeRow","insertColumn","removeColumn","toggleTableHeaders","BlocksToolbar_templateObject","InsertImagePopup","_useState","useState","_useState2","slicedToArray","imageUrl","setImageUrl","InsertImagePopupWrapper","value","target","image","data","src","BlocksToolbar_templateObject2","Image","Image_templateObject","selected","ImageNode","rules","serialize","obj","object","alt","get","htmlSerializer","Html","ExportToolbar","setViewMode","viewMode","ExportToolbarWrapper","string","el","document","body","appendChild","select","execCommand","removeChild","copyToClipboard","viewerContent","alert","concat","ExportToolbar_templateObject","pretty","JSON","stringify","toJSON","ViewerWrapper","Viewer_templateObject","Viewer","content","ExportToolbar_ExportToolbar","ALIGN","NoteNode","rest","objectWithoutProperties","Note","NoteNode_templateObject","DataToolbar","editorJson","setEditorJson","DataToolbarWrapper","Header","Value","fromJSON","parse","JsonPasteArea","rows","DataToolbar_templateObject","textarea","DataToolbar_templateObject2","DataToolbar_templateObject3","initialValue","nodes","leaves","text","schema","last","normalize","_ref","node","child","paragraph","Block","create","insertNodeByKey","blocks","isVoid","plugins","SoftBreak","shift","DeepTable","commands","wrapBlock","unwrapBlock","queries","some","isParagraph","endText","renderNode","next","onKeyDown","event","keyCode","console","log","align","style","textAlign","NoteNode_NoteNode","getData","reduce","prev","objectSpread","toJS","ctrlKey","isCode","block","CodeNode_CodeNode","NonExecutableCodeNode_NonExecutableCodeNode","SampleOutput_SampleOutput","App","state","_ref2","window","_this","setState","renderMark","mark","BoldMark_BoldMark","ItalicMark_ItalicMark","CodeMark_CodeMark","isFocused","ImageNode_ImageNode","renderEditor","wordCount","getBlocks","memo","b","trim","split","length","WordCounter","_this2","this","ToolbarLayout","FormatToolBar_FormatToolbar","DataToolbar_DataToolbar","Layout","BlocksToolbar_BlocksToolbar","slate_react_es","ref","src_Viewer","Component","App_templateObject","App_templateObject2","App_templateObject3","Boolean","location","hostname","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8e811c36.chunk.js","sourcesContent":["import React from \"react\";\n\nexport const BoldMark = props => {\n  const { children, attributes } = props;\n  return <strong {...{ attributes }}>{children}</strong>;\n};\n","import React from \"react\";\nimport styled from \"styled-components\";\n\nexport const CodeMark = props => {\n  const { children, attributes } = props;\n  return <InlineCode {...{ attributes }}>{children}</InlineCode>;\n};\n\nconst InlineCode = styled.code`\n  background: #ccc;\n`;\n","export const fontFamilies = {\n  MONOSPACE: \"Menlo, Consolas, Courier New\"\n};\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport { fontFamilies } from \"../styles/fonts\";\n\nexport const CodeNode = props => {\n  return (\n    <Pre {...props.attributes}>\n      <Code>{props.children}</Code>\n    </Pre>\n  );\n};\n\nconst Code = styled.code``;\n\nconst Pre = styled.pre`\n  background: #eee;\n  position: relative;\n\n  &:after {\n    content: \"Executable Code\";\n    font-family: ${fontFamilies.MONOSPACE};\n    font-size: 10px;\n    position: absolute;\n    top: 2px;\n    right: 2px;\n  }\n`;\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport { fontFamilies } from \"../styles/fonts\";\n\nexport const NonExecutableCodeNode = props => {\n  return (\n    <Pre {...props.attributes}>\n      <Code>{props.children}</Code>\n    </Pre>\n  );\n};\n\nconst Code = styled.code``;\n\nconst Pre = styled.pre`\n  background: #eee;\n  position: relative;\n\n  &:after {\n    content: \"Non Executable Code\";\n    font-family: ${fontFamilies.MONOSPACE};\n    font-size: 10px;\n    position: absolute;\n    top: 2px;\n    right: 2px;\n  }\n`;\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport { fontFamilies } from \"../styles/fonts\";\n\nexport const SampleOutput = props => {\n  return (\n    <Pre {...props.attributes}>\n      <Samp>{props.children}</Samp>\n    </Pre>\n  );\n};\n\nconst Samp = styled.samp``;\n\nconst Pre = styled.pre`\n  background: #eee;\n  position: relative;\n\n  &:after {\n    content: \"Sample Output\";\n    font-family: ${fontFamilies.MONOSPACE};\n    font-size: 10px;\n    position: absolute;\n    top: 2px;\n    right: 2px;\n  }\n`;\n","export const MarkHotKey = options => {\n  const { type, key } = options;\n\n  return {\n    onKeyDown: (event, editor, next) => {\n      if (!event.ctrlKey || event.key !== key) return next();\n      event.preventDefault();\n      editor.toggleMark(type);\n    }\n  };\n};\n","import React from \"react\";\nimport { MarkHotKey } from \"../marks/HotKeys\";\nimport { CodeNode } from \"../nodes/CodeNode\";\nimport { NonExecutableCodeNode } from \"../nodes/NonExecutableCodeNode\";\nimport { SampleOutput } from \"../nodes/SampleOutput\";\n\nexport const codeMarkPlugin = MarkHotKey({\n  type: \"code\",\n  key: \"`\"\n});\n\nexport const codeNodePlugin = options => {\n  return {\n    onKeyDown: (event, editor, next) => {\n      if (!event.ctrlKey) return next();\n\n      switch (event.key) {\n        case \"`\":\n          event.preventDefault();\n          const isCode = editor.value.blocks.some(\n            block => block.type === \"code\"\n          );\n          editor.setBlocks(isCode ? \"paragraph\" : \"code\");\n          break;\n        default:\n          return next();\n      }\n    },\n    renderNode: (props, editor, next) => {\n      switch (props.node.type) {\n        case \"code\":\n          return <CodeNode {...props} />;\n        case \"nonexecutable-code\":\n          return <NonExecutableCodeNode {...props} />;\n        case \"sample-output\":\n          return <SampleOutput {...props} />;\n        default:\n          return next();\n      }\n    }\n  };\n};\n","export const palette = {\n  GREY_BORDER_LIGHT: \"#eee\",\n  TEAL: \"#008080\",\n  WHITE: \"#F0F0F0\"\n};\n","import styled from \"styled-components\";\nimport { palette } from \"../styles/palette\";\nimport { fontFamilies } from \"../styles/fonts\";\n\nexport const Button = styled.button`\n  cursor: pointer;\n  outline: none;\n`;\n\nexport const BlockButton = styled(Button)`\n  border: 1px solid #ccc;\n  padding: 10px;\n  margin: 5px;\n  cursor: pointer;\n  outline: none;\n  font-size: 16px;\n  color: #777;\n`;\n\nexport const InlineButton = styled(Button)`\n  font-size: 13px;\n`;\n\nexport const PrimaryButton = styled.button`\n  background: ${palette.TEAL};\n  color: ${palette.WHITE};\n  height: 30px;\n  margin: 0 10px;\n  font-size: 16px;\n  font-family: ${fontFamilies.MONOSPACE};\n`;\n","import React from \"react\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport {\n  faBold,\n  faItalic,\n  faCode,\n  faAlignCenter,\n  faAlignLeft,\n  faAlignRight\n} from \"@fortawesome/free-solid-svg-icons\";\nimport styled from \"styled-components\";\nimport { InlineButton } from \"../components/Buttons\";\n\nexport const FormatToolbar = props => {\n  const { editor } = props;\n  return (\n    <FormatToolbarWrapper>\n      <InlineButton className=\"tooltip-icon-button\">\n        <FontAwesomeIcon\n          icon={faBold}\n          onClick={() => {\n            editor.toggleMark(\"bold\");\n            editor.focus();\n          }}\n        />\n      </InlineButton>\n      <InlineButton className=\"tooltip-icon-button\">\n        <FontAwesomeIcon\n          icon={faItalic}\n          onClick={() => {\n            editor.toggleMark(\"italic\");\n            editor.focus();\n          }}\n        />\n      </InlineButton>\n      <InlineButton className=\"tooltip-icon-button\">\n        <FontAwesomeIcon\n          icon={faCode}\n          onClick={() => {\n            editor.toggleMark(\"code\");\n            editor.focus();\n          }}\n        />\n      </InlineButton>\n      <InlineButton className=\"tooltip-icon-button\">\n        <FontAwesomeIcon\n          icon={faAlignLeft}\n          onClick={() => {\n            editor.alignLeft();\n            editor.focus();\n          }}\n        />\n      </InlineButton>\n      <InlineButton className=\"tooltip-icon-button\">\n        <FontAwesomeIcon\n          icon={faAlignCenter}\n          onClick={() => {\n            editor.alignCenter();\n            editor.focus();\n          }}\n        />\n      </InlineButton>\n      <InlineButton className=\"tooltip-icon-button\">\n        <FontAwesomeIcon\n          icon={faAlignRight}\n          onClick={() => {\n            editor.alignRight();\n            editor.focus();\n          }}\n        />\n      </InlineButton>\n    </FormatToolbarWrapper>\n  );\n};\n\nconst FormatToolbarWrapper = styled.div`\n  display: flex;\n  border-bottom: solid 1.7px rgba(199, 198, 255, 0.15);\n  padding: 10px 0;\n  background: white;\n`;\n","import React from \"react\";\n\nexport const ItalicMark = props => {\n  const { children, attributes } = props;\n  return <em {...{ attributes }}>{children}</em>;\n};\n","import { palette } from \"../styles/palette\";\nimport styled from \"styled-components\";\nimport { fontFamilies } from \"../styles/fonts\";\n\nexport const Input = styled.input`\n  border: 1px solid ${palette.GREY_BORDER_LIGHT};\n  height: 29px;\n  padding: 0 10px;\n  font-family: ${fontFamilies.MONOSPACE};\n  outline: none;\n  width: 500px;\n  font-size: 18px;\n`;\n\nexport const InlineForm = styled.div`\n  display: grid;\n  grid-template-columns: auto auto;\n`;\n","import React, { useState } from \"react\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport {\n  faHeading,\n  faCode,\n  faImage,\n  faParagraph,\n  faTable,\n  faListUl,\n  faListOl,\n  faCircle,\n  faChevronCircleRight,\n  faStickyNote\n} from \"@fortawesome/free-solid-svg-icons\";\nimport { BlockButton, PrimaryButton } from \"../components/Buttons\";\nimport styled from \"styled-components\";\nimport Popup from \"reactjs-popup\";\nimport { Input, InlineForm } from \"../components/FormElements\";\n\nexport const BlocksToolbar = props => {\n  const { editor, onChange } = props;\n\n  return (\n    <BlocksToolbarWrapper>\n      <BlockButton\n        onClick={() => {\n          if (editor.isList() && !editor.isBlockEmpty()) {\n            editor.insertBlock(\"paragraph\").unwrapList();\n          } else {\n            editor.setBlocks(\"paragraph\").unwrapList();\n          }\n          editor.focus();\n        }}\n      >\n        <FontAwesomeIcon icon={faParagraph} />\n      </BlockButton>\n      <BlockButton\n        onClick={() => {\n          if (editor.isBlockEmpty()) {\n            editor.setBlocks(\"code\");\n          } else {\n            editor.insertBlock(\"code\").unwrapList();\n          }\n\n          editor.focus();\n        }}\n      >\n        <FontAwesomeIcon icon={faCode} />\n      </BlockButton>\n      <BlockButton\n        onClick={() => {\n          if (editor.isBlockEmpty()) {\n            editor.setBlocks(\"nonexecutable-code\");\n          } else {\n            editor.insertBlock(\"nonexecutable-code\").unwrapList();\n          }\n\n          editor.focus();\n        }}\n      >\n        <span className=\"fa-layers fa-fw\">\n          <FontAwesomeIcon icon={faCircle} size=\"lg\" />\n          <FontAwesomeIcon icon={faCode} size=\"xs\" inverse />\n        </span>\n      </BlockButton>\n      <BlockButton\n        onClick={() => {\n          if (editor.isBlockEmpty()) {\n            editor.setBlocks(\"sample-output\");\n          } else {\n            editor.insertBlock(\"sample-output\").unwrapList();\n          }\n\n          editor.focus();\n        }}\n      >\n        <FontAwesomeIcon icon={faChevronCircleRight} />\n      </BlockButton>\n      <BlockButton\n        onClick={() => {\n          editor.setBlocks(\"heading-1\");\n          !editor.isBlockEmpty() &&\n            editor\n              .moveToEndOfBlock()\n              .insertBlock(\"paragraph\")\n              .unwrapList();\n          editor.focus();\n        }}\n      >\n        <FontAwesomeIcon icon={faHeading} />\n      </BlockButton>\n      <BlockButton\n        onClick={() => {\n          editor.setBlocks(\"heading-2\");\n          !editor.isBlockEmpty() &&\n            editor\n              .moveToEndOfBlock()\n              .insertBlock(\"paragraph\")\n              .unwrapList();\n          editor.focus();\n        }}\n      >\n        <FontAwesomeIcon icon={faHeading} size=\"sm\" />\n      </BlockButton>\n      <Popup\n        modal\n        trigger={\n          <BlockButton className=\"tooltip-icon-button\">\n            <FontAwesomeIcon icon={faImage} />\n          </BlockButton>\n        }\n      >\n        {close => <InsertImagePopup {...props} closePopup={close} />}\n      </Popup>\n\n      <BlockButton\n        onClick={e => {\n          e.preventDefault();\n          if (!editor.isList()) {\n            onChange(editor.insertUnorderedList());\n          } else {\n            onChange(editor.unwrapList());\n          }\n        }}\n      >\n        <FontAwesomeIcon icon={faListUl} />\n      </BlockButton>\n      <BlockButton>\n        <FontAwesomeIcon\n          icon={faListOl}\n          onClick={e => {\n            e.preventDefault();\n            if (!editor.isList()) {\n              onChange(editor.insertOrderedList());\n            } else {\n              onChange(editor.unwrapList());\n            }\n          }}\n        />\n      </BlockButton>\n      <BlockButton>\n        <FontAwesomeIcon\n          icon={faStickyNote}\n          onClick={e => {\n            e.preventDefault();\n            onChange(editor.insertNote());\n          }}\n        />\n      </BlockButton>\n      <BlockButton>\n        <FontAwesomeIcon\n          icon={faTable}\n          onClick={e => {\n            e.preventDefault();\n            onChange(editor.insertTable().unwrapList());\n          }}\n        />\n      </BlockButton>\n      {editor && editor.isSelectionInTable() && (\n        <>\n          <button onClick={() => onChange(editor.removeTable())}>\n            Delete Table\n          </button>\n          <button onClick={() => onChange(editor.insertRow())}>\n            Insert Row\n          </button>\n          <button onClick={() => onChange(editor.removeRow())}>\n            Delete Row\n          </button>\n          <button onClick={() => onChange(editor.insertColumn())}>\n            Insert Column\n          </button>\n          <button onClick={() => onChange(editor.removeColumn())}>\n            Delete Column\n          </button>\n          <button onClick={() => onChange(editor.toggleTableHeaders())}>\n            Toggle header\n          </button>\n        </>\n      )}\n    </BlocksToolbarWrapper>\n  );\n};\n\nconst BlocksToolbarWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  position: fixed;\n  left: 0;\n  top: 10%;\n`;\n\nconst InsertImagePopup = props => {\n  const { editor, closePopup } = props;\n  const [imageUrl, setImageUrl] = useState(\"https://placekitten.com/200/300\");\n\n  return (\n    <InsertImagePopupWrapper>\n      <InlineForm>\n        <Input\n          type=\"text\"\n          value={imageUrl}\n          onChange={e => setImageUrl(e.target.value)}\n        />\n        <PrimaryButton\n          onClick={e => {\n            e.preventDefault();\n            const image = {\n              type: \"image\",\n              data: {\n                src: imageUrl\n              }\n            };\n            editor.isBlockEmpty()\n              ? editor.setBlocks(image)\n              : editor.insertBlock(image);\n            editor.insertBlock(\"paragraph\");\n            editor.focus();\n            closePopup();\n          }}\n        >\n          Insert\n        </PrimaryButton>\n      </InlineForm>\n    </InsertImagePopupWrapper>\n  );\n};\n\nconst InsertImagePopupWrapper = styled.div`\n  width: 50%;\n  padding: 30px 50px;\n  z-index: 10000;\n`;\n","import styled from \"styled-components\";\n\nexport const Image = styled(\"img\")`\n  display: block;\n  max-width: 100%;\n  box-shadow: ${props => (props.selected ? \"0 0 0 2px blue;\" : \"none\")};\n`;\n","import React from \"react\";\nimport { Image } from \"../components/Image\";\n\nexport const ImageNode = props => {\n  const { attributes } = props;\n  return <Image {...attributes} src={props.src} />;\n};\n","import React from \"react\";\nimport Html from \"slate-html-serializer\";\n\nconst rules = [\n  {\n    serialize: (obj, children) => {\n      if (obj.object === \"block\") {\n        switch (obj.type) {\n          case \"code\":\n            return (\n              <pre>\n                <code className=\"exec\">{children}</code>\n              </pre>\n            );\n          case \"nonexecutable-code\":\n            return (\n              <pre>\n                <code>{children}</code>\n              </pre>\n            );\n          case \"sample-output\":\n            return (\n              <pre>\n                <samp>{children}</samp>\n              </pre>\n            );\n          case \"image\":\n            return <img alt=\"\" src={obj.data.get(\"src\")} />;\n          case \"paragraph\":\n            return <p>{children}</p>;\n          case \"heading-1\":\n            return <h1>{children}</h1>;\n          case \"heading-2\":\n            return <h2>{children}</h2>;\n          case \"ul-list\":\n            return <ul>{children}</ul>;\n          case \"ol-list\":\n            return <ol>{children}</ol>;\n          case \"list-item\":\n            return <li>{children}</li>;\n          case \"table\":\n            return <table>{children}</table>;\n          case \"table_row\":\n            return <tr>{children}</tr>;\n          case \"table_cell\":\n            return <td>{children}</td>;\n          default:\n            return <p>{children}</p>;\n        }\n      }\n    }\n  },\n  {\n    serialize: (obj, children) => {\n      if (obj.object === \"mark\") {\n        switch (obj.type) {\n          case \"bold\":\n            return <strong>{children}</strong>;\n          case \"italic\":\n            return <em>{children}</em>;\n          case \"code\":\n            return <code>{children}</code>;\n          default:\n            return;\n        }\n      }\n    }\n  }\n];\n\n// Create a new serializer instance with our `rules` from above.\nconst htmlSerializer = new Html({ rules });\n\nexport default htmlSerializer;\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport { InlineButton } from \"../components/Buttons\";\nimport { viewerContent } from \"../Viewer\";\n\nconst copyToClipboard = string => {\n  const el = document.createElement(\"textarea\");\n  el.value = string;\n  document.body.appendChild(el);\n  el.select();\n  document.execCommand(\"copy\");\n  document.body.removeChild(el);\n};\n\nexport const ExportToolbar = props => {\n  const { editor, setViewMode, viewMode } = props;\n  return (\n    <ExportToolbarWrapper>\n      <InlineButton onClick={() => setViewMode(\"HTML\")}>HTML</InlineButton>\n      <InlineButton\n        onClick={() => {\n          setViewMode(\"JSON\");\n        }}\n      >\n        JSON\n      </InlineButton>\n      <InlineButton\n        onClick={() => {\n          const content = viewerContent(editor, viewMode);\n          copyToClipboard(content);\n          alert(`Copied ${viewMode} to clipboard!`);\n        }}\n      >\n        Copy to Clipboard\n      </InlineButton>\n    </ExportToolbarWrapper>\n  );\n};\n\nconst ExportToolbarWrapper = styled.div`\n  top: 0;\n  right: 0;\n`;\n","import React, { useState } from \"react\";\nimport styled from \"styled-components\";\nimport htmlSerializer from \"./serializers/HtmlSerializer\";\nimport pretty from \"pretty\";\nimport { ExportToolbar } from \"./toolbars/ExportToolbar\";\n\nexport const viewerContent = (editor, viewMode) => {\n  if (!editor) {\n    return \"\";\n  }\n\n  if (viewMode === \"HTML\") {\n    return pretty(htmlSerializer.serialize(editor.value));\n  } else {\n    return JSON.stringify(editor.value.toJSON(), null, 4);\n  }\n};\n\nconst Viewer = props => {\n  const { editor } = props;\n\n  const [viewMode, setViewMode] = useState(\"HTML\");\n  let content = viewerContent(editor, viewMode);\n\n  return (\n    <ViewerWrapper>\n      <ExportToolbar\n        editor={editor}\n        viewMode={viewMode}\n        setViewMode={setViewMode}\n      />\n      <pre>{content}</pre>\n    </ViewerWrapper>\n  );\n};\n\nconst ViewerWrapper = styled.div`\n  padding: 10px;\n  max-width: 100%;\n  overflow-x: auto;\n`;\n\nexport default Viewer;\n","export const ALIGN = {\n  LEFT: \"left\",\n  CENTER: \"center\",\n  RIGHT: \"right\"\n};\n","import React from \"react\";\nimport styled from \"styled-components\";\n\nexport const NoteNode = props => {\n  const { attributes, children, ...rest } = props;\n  return (\n    <Note {...attributes} {...rest}>\n      {children}\n    </Note>\n  );\n};\n\nconst Note = styled.div`\n  padding: 20px;\n  border: 1px solid #777;\n`;\n","import React, { useState } from \"react\";\nimport { Value } from \"slate\";\nimport styled from \"styled-components\";\nimport Popup from \"reactjs-popup\";\nimport { fontFamilies } from \"../styles/fonts\";\nimport { PrimaryButton } from \"../components/Buttons\";\n\nexport const DataToolbar = props => {\n  const { editor, onChange } = props;\n  const [editorJson, setEditorJson] = useState({});\n  return (\n    <DataToolbarWrapper>\n      <Popup modal trigger={<button>Import</button>}>\n        {close => {\n          return (\n            <>\n              <Header>\n                <h3>Paste JSON here</h3>\n                <PrimaryButton\n                  onClick={() => {\n                    onChange({\n                      value: Value.fromJSON(JSON.parse(editorJson))\n                    });\n                    close();\n                  }}\n                >\n                  Import\n                </PrimaryButton>\n              </Header>\n\n              <JsonPasteArea\n                rows={20}\n                onChange={e => setEditorJson(e.target.value)}\n              />\n            </>\n          );\n        }}\n      </Popup>\n    </DataToolbarWrapper>\n  );\n};\n\nconst DataToolbarWrapper = styled.div`\n  justify-self: end;\n`;\n\nconst JsonPasteArea = styled.textarea`\n  font-family: ${fontFamilies.MONOSPACE};\n  outline: none;\n  width: calc(100% - 50px);\n  margin: 0 auto;\n  display: block;\n`;\n\nconst Header = styled.div`\n  display: grid;\n  grid-template-columns: auto auto;\n  align-items: center;\n  cursor: pointer;\n`;\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport { Editor } from \"slate-react\";\nimport { Value, Block } from \"slate\";\nimport { BoldMark } from \"./marks/BoldMark\";\nimport { CodeMark } from \"./marks/CodeMark\";\nimport { codeNodePlugin } from \"./plugins/codePlugin\";\nimport { FormatToolbar } from \"./toolbars/FormatToolBar\";\nimport { ItalicMark } from \"./marks/ItalicMark\";\nimport { BlocksToolbar } from \"./toolbars/BlocksToolbar\";\nimport { ImageNode } from \"./nodes/ImageNode\";\nimport SoftBreak from \"slate-soft-break\";\nimport DeepTable from \"slate-deep-table\";\nimport { listPlugin } from \"./plugins/listPlugin\";\nimport Viewer from \"./Viewer\";\nimport styled from \"styled-components\";\nimport { alignPlugin } from \"./plugins/alignPlugin\";\nimport { notePlugin } from \"./plugins/notePlugin\";\nimport { DataToolbar } from \"./toolbars/DataToolbar\";\n\nconst initialValue = Value.fromJSON({\n  document: {\n    nodes: [\n      {\n        object: \"block\",\n        type: \"paragraph\",\n        nodes: [\n          {\n            object: \"text\",\n            leaves: [\n              {\n                text: \"A line of text in a paragraph.\"\n              }\n            ]\n          }\n        ]\n      }\n    ]\n  }\n});\n\nconst schema = {\n  // This section is need for the image upload functionality, if this is not there, then we cannot add anything after an image.\n  document: {\n    last: { type: \"paragraph\" },\n    normalize: (editor, { code, node, child }) => {\n      switch (code) {\n        case \"last_child_type_invalid\": {\n          const paragraph = Block.create(\"paragraph\");\n          return editor.insertNodeByKey(node.key, node.nodes.size, paragraph);\n        }\n      }\n    }\n  },\n  blocks: {\n    image: {\n      isVoid: true\n    }\n  }\n};\n\nconst plugins = [\n  SoftBreak({\n    shift: true\n  }),\n  DeepTable(),\n  listPlugin(),\n  notePlugin(),\n  alignPlugin(),\n  codeNodePlugin()\n];\n\nclass App extends Component {\n  // Set the initial value when the app is first constructed.\n\n  state = {\n    value: initialValue\n  };\n\n  // On change, update the app's React state with the new editor value.\n  onChange = ({ value }) => {\n    window.content = value.toJSON();\n\n    this.setState({ value });\n  };\n\n  renderMark = (props, editor, next) => {\n    switch (props.mark.type) {\n      case \"bold\":\n        return <BoldMark {...props} {...props.attributes} />;\n      case \"italic\":\n        return <ItalicMark {...props} {...props.attributes} />;\n      case \"code\":\n        return <CodeMark {...props} {...props.attributes} />;\n      default:\n        return next();\n    }\n  };\n  renderNode = (props, editor, next) => {\n    const { attributes, node, children, isFocused } = props;\n    const align = node.data.get(\"align\");\n    const style = align\n      ? {\n          textAlign: align\n        }\n      : {};\n\n    switch (node.type) {\n      case \"image\":\n        const src = node.data.get(\"src\");\n        console.log(\"Image source is \", src);\n        return <ImageNode src={src} selected={isFocused} {...attributes} />;\n      case \"heading-1\":\n        return (\n          <h1 {...attributes} style={style}>\n            {children}\n          </h1>\n        );\n      case \"heading-2\":\n        return (\n          <h2 {...attributes} style={style}>\n            {children}\n          </h2>\n        );\n      case \"paragraph\":\n        return (\n          <p {...attributes} style={style}>\n            {children}\n          </p>\n        );\n      default:\n        return next();\n    }\n  };\n\n  renderEditor = (props, editor, next) => {\n    const children = next();\n    const wordCount = props.value.document\n      .getBlocks()\n      .reduce((memo, b) => memo + b.text.trim().split(/\\s+/).length, 0);\n    return (\n      <div>\n        <div>{children}</div>\n        <WordCounter>Word Count: {wordCount}</WordCounter>\n      </div>\n    );\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <ToolbarLayout>\n          <FormatToolbar editor={this.editor} />\n          <DataToolbar editor={this.editor} onChange={this.onChange} />\n        </ToolbarLayout>\n\n        <Layout>\n          <BlocksToolbar editor={this.editor} onChange={this.onChange} />\n          <Editor\n            plugins={plugins}\n            value={this.state.value}\n            onChange={this.onChange}\n            renderMark={this.renderMark}\n            renderNode={this.renderNode}\n            renderEditor={this.renderEditor}\n            schema={schema}\n            ref={editor => (this.editor = editor)}\n          />\n          <Viewer editor={this.editor} />\n        </Layout>\n      </div>\n    );\n  }\n}\n\nconst ToolbarLayout = styled.div`\n  width: 100%;\n  max-width: 1000px;\n  position: fixed;\n  display: grid;\n  top: 0;\n  grid-template-columns: auto auto;\n  grid-column-gap: 50px;\n  background: white;\n`;\n\nconst Layout = styled.div`\n  margin-top: 50px;\n  display: grid;\n\n  grid-column-gap: 50px;\n\n  @media (min-width: 720px) {\n    grid-template-columns: 50% 50%;\n  }\n`;\n\nconst WordCounter = styled(\"span\")`\n  margin-top: 10px;\n  padding: 12px;\n  background-color: #ebebeb;\n  display: inline-block;\n`;\n\nexport default App;\n","import React from \"react\";\n\nexport const listPlugin = options => {\n  return {\n    commands: {\n      insertUnorderedList: editor => {\n        editor\n          .setBlocks(\"list-item\")\n          .wrapBlock(\"ul-list\")\n          .focus();\n      },\n      insertOrderedList: editor => {\n        editor\n          .setBlocks(\"list-item\")\n          .wrapBlock(\"ol-list\")\n          .focus();\n      },\n      unwrapList: editor => {\n        editor\n          .unwrapBlock(\"ul-list\")\n          .unwrapBlock(\"ol-list\")\n          .focus();\n      }\n    },\n    queries: {\n      isList: editor => {\n        return editor.value.blocks.some(node => node.type === \"list-item\");\n      },\n      isParagraph: editor => {\n        return editor.value.blocks.some(node => node.type === \"paragraph\");\n      },\n      isBlockEmpty: editor => {\n        return editor.value.endText && editor.value.endText.text === \"\";\n      }\n    },\n    renderNode: (props, editor, next) => {\n      const { attributes, node, children } = props;\n      switch (node.type) {\n        case \"ul-list\":\n          return <ul {...attributes}>{children}</ul>;\n        case \"ol-list\":\n          return <ol {...attributes}>{children}</ol>;\n        case \"list-item\":\n          return <li {...props.attributes}>{children}</li>;\n        default:\n          return next();\n      }\n    },\n    onKeyDown: (event, editor, next) => {\n      if (editor.isList() && editor.isBlockEmpty() && event.keyCode === 13) {\n        event.preventDefault();\n        editor\n          .setBlocks(\"paragraph\")\n          .unwrapList()\n          .focus();\n      } else {\n        return next();\n      }\n    }\n  };\n};\n","import React from \"react\";\nimport { NoteNode } from \"../nodes/NoteNode\";\n\nexport const notePlugin = options => {\n  return {\n    commands: {\n      insertNote: editor => {\n        console.log(\"Inserting note\");\n        editor.insertBlock(\"note\").unwrapList();\n      }\n    },\n    renderNode: (props, editor, next) => {\n      const { node } = props;\n      const align = node.data.get(\"align\");\n\n      const style = align\n        ? {\n            textAlign: align\n          }\n        : {};\n\n      switch (node.type) {\n        case \"note\":\n          console.log(\"Rendering a note\");\n          return <NoteNode {...props} style={style} />;\n        default:\n          return next();\n      }\n    }\n  };\n};\n","import { ALIGN } from \"../consts\";\n\nexport const alignPlugin = options => {\n  return {\n    queries: {\n      getData: editor => {\n        return editor.value.document.nodes.reduce((prev, next) => {\n          return {\n            ...prev,\n            ...next.get(\"data\").toJS()\n          };\n        }, {});\n      }\n    },\n    commands: {\n      alignLeft: editor => {\n        editor.setBlocks({\n          data: {\n            ...editor.getData(),\n            align: ALIGN.LEFT\n          }\n        });\n      },\n      alignCenter: editor => {\n        editor.setBlocks({\n          data: {\n            ...editor.getData(),\n            align: ALIGN.CENTER\n          }\n        });\n      },\n      alignRight: editor => {\n        editor.setBlocks({\n          data: {\n            ...editor.getData(),\n            align: ALIGN.RIGHT\n          }\n        });\n      }\n    }\n  };\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"editor\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}