{"version":3,"sources":["marks/BoldMark.js","marks/HotKeys.js","plugins/boldPlugin.js","marks/CodeMark.js","styles/fonts.js","nodes/CodeNode.js","nodes/NonExecutableCodeNode.js","nodes/SampleOutput.js","plugins/codePlugin.js","styles/palette.js","components/Buttons.js","toolbars/FormatToolBar.js","marks/ItalicMark.js","components/FormElements.js","toolbars/BlocksToolbar.js","components/Image.js","nodes/ImageNode.js","serializers/HtmlSerializer.js","Viewer.js","toolbars/ExportToolbar.js","App.js","plugins/listPlugin.js","serviceWorker.js","index.js"],"names":["BoldMark","props","children","attributes","mark","react_default","a","createElement","MarkHotKey","options","type","key","onKeyDown","event","editor","next","ctrlKey","preventDefault","toggleMark","CodeMark","InlineCode","styled","code","_templateObject","fontFamilies","CodeNode","Pre","Code","CodeNode_templateObject","pre","_templateObject2","NonExecutableCodeNode","NonExecutableCodeNode_Pre","NonExecutableCodeNode_Code","NonExecutableCodeNode_templateObject","NonExecutableCodeNode_templateObject2","SampleOutput","SampleOutput_Pre","Samp","samp","SampleOutput_templateObject","SampleOutput_templateObject2","palette","Button","button","Buttons_templateObject","BlockButton","Buttons_templateObject2","InlineButton","_templateObject3","PrimaryButton","_templateObject4","FormatToolbar","FormatToolbarWrapper","className","index_es","icon","faBold","onClick","focus","faItalic","faCode","div","FormatToolBar_templateObject","ItalicMark","Input","input","FormElements_templateObject","InlineForm","FormElements_templateObject2","BlocksToolbar","onChange","BlocksToolbarWrapper","isList","isBlockEmpty","insertBlock","unwrapList","setBlocks","faParagraph","faHeading","size","reactjs_popup_es","modal","trigger","faImage","close","BlocksToolbar_InsertImagePopup","Object","assign","closePopup","e","insertUnorderedList","faListUl","faListOl","insertOrderedList","faTable","insertTable","isSelectionInTable","Fragment","removeTable","insertRow","removeRow","insertColumn","removeColumn","BlocksToolbar_templateObject","InsertImagePopup","_useState","useState","_useState2","slicedToArray","imageUrl","setImageUrl","InsertImagePopupWrapper","value","target","image","data","src","BlocksToolbar_templateObject2","Image","Image_templateObject","selected","ImageNode","node","rules","serialize","obj","object","get","htmlSerializer","Html","viewerContent","viewMode","pretty","JSON","stringify","toJSON","ViewerWrapper","Viewer_templateObject","Viewer","setViewMode","content","ExportToolbar_ExportToolbar","ExportToolbar","ExportToolbarWrapper","string","el","document","body","appendChild","select","execCommand","removeChild","copyToClipboard","alert","concat","ExportToolbar_templateObject","initialValue","Value","fromJSON","nodes","leaves","text","schema","last","normalize","_ref","child","paragraph","Block","create","insertNodeByKey","blocks","isVoid","plugins","SoftBreak","shift","DeepTable","commands","wrapBlock","unwrapBlock","queries","some","isParagraph","endText","renderNode","isFocused","keyCode","isCode","block","CodeNode_CodeNode","NonExecutableCodeNode_NonExecutableCodeNode","SampleOutput_SampleOutput","App","state","_ref2","window","_this","setState","renderMark","BoldMark_BoldMark","ItalicMark_ItalicMark","CodeMark_CodeMark","console","log","ImageNode_ImageNode","_this2","this","FormatToolBar_FormatToolbar","BlocksToolbar_BlocksToolbar","Layout","slate_react_es","ref","src_Viewer","Component","App_templateObject","Boolean","location","hostname","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e6af3151.chunk.js","sourcesContent":["import React from \"react\";\n\nexport const BoldMark = props => {\n  const { children, mark, attributes } = props;\n  return <strong {...{ attributes }}>{children}</strong>;\n};\n","export const MarkHotKey = options => {\n  const { type, key } = options;\n\n  return {\n    onKeyDown: (event, editor, next) => {\n      if (!event.ctrlKey || event.key !== key) return next();\n      event.preventDefault();\n      editor.toggleMark(type);\n    }\n  };\n};\n","import { MarkHotKey } from \"../marks/HotKeys\";\n\nexport const boldPlugin = MarkHotKey({\n  type: \"bold\",\n  key: \"b\"\n});\n\n","import React from \"react\";\nimport styled from \"styled-components\";\n\nexport const CodeMark = props => {\n  const { children, mark, attributes } = props;\n  return <InlineCode {...{ attributes }}>{children}</InlineCode>;\n};\n\nconst InlineCode = styled.code`\n  background: #ccc;\n`;\n","export const fontFamilies = {\n  MONOSPACE: \"Menlo, Consolas, Courier New\"\n};\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport { fontFamilies } from \"../styles/fonts\";\n\nexport const CodeNode = props => {\n  return (\n    <Pre {...props.attributes}>\n      <Code>{props.children}</Code>\n    </Pre>\n  );\n};\n\nconst Code = styled.code``;\n\nconst Pre = styled.pre`\n  background: #eee;\n  position: relative;\n\n  &:after {\n    content: \"Executable Code\";\n    font-family: ${fontFamilies.MONOSPACE};\n    font-size: 10px;\n    position: absolute;\n    top: 2px;\n    right: 2px;\n  }\n`;\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport { fontFamilies } from \"../styles/fonts\";\n\nexport const NonExecutableCodeNode = props => {\n  return (\n    <Pre {...props.attributes}>\n      <Code>{props.children}</Code>\n    </Pre>\n  );\n};\n\nconst Code = styled.code``;\n\nconst Pre = styled.pre`\n  background: #eee;\n  position: relative;\n\n  &:after {\n    content: \"Non Executable Code\";\n    font-family: ${fontFamilies.MONOSPACE};\n    font-size: 10px;\n    position: absolute;\n    top: 2px;\n    right: 2px;\n  }\n`;\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport { fontFamilies } from \"../styles/fonts\";\n\nexport const SampleOutput = props => {\n  return (\n    <Pre {...props.attributes}>\n      <Samp>{props.children}</Samp>\n    </Pre>\n  );\n};\n\nconst Samp = styled.samp``;\n\nconst Pre = styled.pre`\n  background: #eee;\n  position: relative;\n\n  &:after {\n    content: \"Sample Output\";\n    font-family: ${fontFamilies.MONOSPACE};\n    font-size: 10px;\n    position: absolute;\n    top: 2px;\n    right: 2px;\n  }\n`;\n","import React from \"react\";\nimport { MarkHotKey } from \"../marks/HotKeys\";\nimport { CodeNode } from \"../nodes/CodeNode\";\nimport { NonExecutableCodeNode } from \"../nodes/NonExecutableCodeNode\";\nimport { SampleOutput } from \"../nodes/SampleOutput\";\n\nexport const codeMarkPlugin = MarkHotKey({\n  type: \"code\",\n  key: \"`\"\n});\n\nexport const codeNodePlugin = options => {\n  return {\n    onKeyDown: (event, editor, next) => {\n      if (!event.ctrlKey) return next();\n\n      switch (event.key) {\n        case \"`\":\n          event.preventDefault();\n          const isCode = editor.value.blocks.some(\n            block => block.type === \"code\"\n          );\n          editor.setBlocks(isCode ? \"paragraph\" : \"code\");\n          break;\n        default:\n          return next();\n      }\n    },\n    renderNode: (props, editor, next) => {\n      switch (props.node.type) {\n        case \"code\":\n          return <CodeNode {...props} />;\n        case \"nonexecutable-code\":\n          return <NonExecutableCodeNode {...props} />;\n        case \"sample-output\":\n          return <SampleOutput {...props} />;\n        default:\n          return next();\n      }\n    }\n  };\n};\n","export const palette = {\n  GREY_BORDER_LIGHT: \"#eee\",\n  TEAL: \"#008080\",\n  WHITE: \"#F0F0F0\"\n};\n","import styled from \"styled-components\";\nimport { palette } from \"../styles/palette\";\nimport { fontFamilies } from \"../styles/fonts\";\n\nexport const Button = styled.button`\n  cursor: pointer;\n  outline: none;\n`;\n\nexport const BlockButton = styled(Button)`\n  border: 1px solid #ccc;\n  padding: 10px;\n  margin: 5px;\n  cursor: pointer;\n  outline: none;\n  font-size: 16px;\n  color: #777;\n`;\n\nexport const InlineButton = styled(Button)`\n  font-size: 13px;\n`;\n\nexport const PrimaryButton = styled.button`\n  background: ${palette.TEAL};\n  color: ${palette.WHITE};\n  height: 30px;\n  margin: 0 10px;\n  font-size: 16px;\n  font-family: ${fontFamilies.MONOSPACE};\n`;\n","import React from \"react\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport {\n  faBold,\n  faItalic,\n  faParagraph,\n  faHeading,\n  faCode\n} from \"@fortawesome/free-solid-svg-icons\";\nimport styled from \"styled-components\";\nimport { InlineButton } from \"../components/Buttons\";\n\nexport const FormatToolbar = props => {\n  const { editor } = props;\n  return (\n    <FormatToolbarWrapper>\n      <InlineButton className=\"tooltip-icon-button\">\n        <FontAwesomeIcon\n          icon={faBold}\n          onClick={() => {\n            editor.toggleMark(\"bold\");\n            editor.focus();\n          }}\n        />\n      </InlineButton>\n      <InlineButton className=\"tooltip-icon-button\">\n        <FontAwesomeIcon\n          icon={faItalic}\n          onClick={() => {\n            editor.toggleMark(\"italic\");\n            editor.focus();\n          }}\n        />\n      </InlineButton>\n      <InlineButton className=\"tooltip-icon-button\">\n        <FontAwesomeIcon\n          icon={faCode}\n          onClick={() => {\n            editor.toggleMark(\"code\");\n            editor.focus();\n          }}\n        />\n      </InlineButton>\n    </FormatToolbarWrapper>\n  );\n};\n\nconst FormatToolbarWrapper = styled.div`\n  display: flex;\n  border-bottom: solid 1.7px rgba(199, 198, 255, 0.15);\n  padding: 10px 0;\n  margin: 0 0 10px 0;\n`;\n","import React from \"react\";\n\nexport const ItalicMark = props => {\n  const { children, mark, attributes } = props;\n  return <em {...{ attributes }}>{children}</em>;\n};\n","import { palette } from \"../styles/palette\";\nimport styled from \"styled-components\";\nimport { fontFamilies } from \"../styles/fonts\";\n\nexport const Input = styled.input`\n  border: 1px solid ${palette.GREY_BORDER_LIGHT};\n  height: 29px;\n  padding: 0 10px;\n  font-family: ${fontFamilies.MONOSPACE};\n  outline: none;\n  width: 500px;\n  font-size: 18px;\n`;\n\nexport const InlineForm = styled.div`\n  display: grid;\n  grid-template-columns: auto auto;\n`;\n","import React, { useState } from \"react\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport {\n  faHeading,\n  faCode,\n  faImage,\n  faParagraph,\n  faTable,\n  faListUl,\n  faListOl,\n  faCircle,\n  faChevronCircleRight\n} from \"@fortawesome/free-solid-svg-icons\";\nimport { BlockButton, PrimaryButton } from \"../components/Buttons\";\nimport styled from \"styled-components\";\nimport Popup from \"reactjs-popup\";\nimport { Input, InlineInput, InlineForm } from \"../components/FormElements\";\n\nexport const BlocksToolbar = props => {\n  const { editor, onChange } = props;\n\n  return (\n    <BlocksToolbarWrapper>\n      <BlockButton\n        onClick={() => {\n          if (editor.isList() && !editor.isBlockEmpty()) {\n            editor.insertBlock(\"paragraph\").unwrapList();\n          } else {\n            editor.setBlocks(\"paragraph\").unwrapList();\n          }\n          editor.focus();\n        }}\n      >\n        <FontAwesomeIcon icon={faParagraph} />\n      </BlockButton>\n      <BlockButton\n        onClick={() => {\n          if (editor.isBlockEmpty()) {\n            editor.setBlocks(\"code\");\n          } else {\n            editor.insertBlock(\"code\").unwrapList();\n          }\n\n          editor.focus();\n        }}\n      >\n        <FontAwesomeIcon icon={faCode} />\n      </BlockButton>\n      {/* <BlockButton\n        onClick={() => {\n          if (editor.isBlockEmpty()) {\n            editor.setBlocks(\"nonexecutable-code\");\n          } else {\n            editor.insertBlock(\"nonexecutable-code\").unwrapList();\n          }\n\n          editor.focus();\n        }}\n      >\n        <span className=\"fa-layers fa-fw\">\n          <FontAwesomeIcon icon={faCircle} size=\"lg\" />\n          <FontAwesomeIcon icon={faCode} size=\"xs\" inverse />\n        </span>\n      </BlockButton>\n      <BlockButton\n        onClick={() => {\n          if (editor.isBlockEmpty()) {\n            editor.setBlocks(\"sample-output\");\n          } else {\n            editor.insertBlock(\"sample-output\").unwrapList();\n          }\n\n          editor.focus();\n        }}\n      >\n        <FontAwesomeIcon icon={faChevronCircleRight} />\n      </BlockButton> */}\n      <BlockButton\n        onClick={() => {\n          editor.setBlocks(\"heading-1\");\n          !editor.isBlockEmpty() &&\n            editor.insertBlock(\"paragraph\").unwrapList();\n          editor.focus();\n        }}\n      >\n        <FontAwesomeIcon icon={faHeading} />\n      </BlockButton>\n      <BlockButton\n        onClick={() => {\n          editor.setBlocks(\"heading-2\");\n          !editor.isBlockEmpty() &&\n            editor.insertBlock(\"paragraph\").unwrapList();\n          editor.focus();\n        }}\n      >\n        <FontAwesomeIcon icon={faHeading} size=\"sm\" />\n      </BlockButton>\n      <Popup\n        modal\n        trigger={\n          <BlockButton className=\"tooltip-icon-button\">\n            <FontAwesomeIcon icon={faImage} />\n          </BlockButton>\n        }\n      >\n        {close => <InsertImagePopup {...props} closePopup={close} />}\n      </Popup>\n\n      <BlockButton\n        onClick={e => {\n          e.preventDefault();\n          if (!editor.isList()) {\n            onChange(editor.insertUnorderedList());\n          } else {\n            onChange(editor.unwrapList());\n          }\n        }}\n      >\n        <FontAwesomeIcon icon={faListUl} />\n      </BlockButton>\n      <BlockButton>\n        <FontAwesomeIcon\n          icon={faListOl}\n          onClick={e => {\n            e.preventDefault();\n            if (!editor.isList()) {\n              onChange(editor.insertOrderedList());\n            } else {\n              onChange(editor.unwrapList());\n            }\n          }}\n        />\n      </BlockButton>\n      <BlockButton>\n        <FontAwesomeIcon\n          icon={faTable}\n          onClick={e => {\n            e.preventDefault();\n            onChange(editor.insertTable().unwrapList());\n          }}\n        />\n      </BlockButton>\n      {editor && editor.isSelectionInTable() && (\n        <>\n          <button onClick={() => onChange(editor.removeTable())}>\n            Delete Table\n          </button>\n          <button onClick={() => onChange(editor.insertRow())}>\n            Insert Row\n          </button>\n          <button onClick={() => onChange(editor.removeRow())}>\n            Delete Row\n          </button>\n          <button onClick={() => onChange(editor.insertColumn())}>\n            Insert Column\n          </button>\n          <button onClick={() => onChange(editor.removeColumn())}>\n            Delete Column\n          </button>\n        </>\n      )}\n    </BlocksToolbarWrapper>\n  );\n};\n\nconst BlocksToolbarWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  padding: 10px 0;\n  margin: 0 0 10px 0;\n  position: fixed;\n  left: 100px;\n  top: 100px;\n`;\n\nconst InsertImagePopup = props => {\n  const { editor, closePopup } = props;\n  const [imageUrl, setImageUrl] = useState(\"https://placekitten.com/200/300\");\n\n  return (\n    <InsertImagePopupWrapper>\n      <InlineForm>\n        <Input\n          type=\"text\"\n          value={imageUrl}\n          onChange={e => setImageUrl(e.target.value)}\n        />\n        <PrimaryButton\n          onClick={e => {\n            e.preventDefault();\n            const image = {\n              type: \"image\",\n              data: {\n                src: imageUrl\n              }\n            };\n            editor.isBlockEmpty()\n              ? editor.setBlocks(image)\n              : editor.insertBlock(image);\n            editor.insertBlock(\"paragraph\");\n            editor.focus();\n            closePopup();\n          }}\n        >\n          Insert\n        </PrimaryButton>\n      </InlineForm>\n    </InsertImagePopupWrapper>\n  );\n};\n\nconst InsertImagePopupWrapper = styled.div`\n  width: 50%;\n  padding: 30px 50px;\n`;\n","import styled from \"styled-components\";\n\nexport const Image = styled(\"img\")`\n  display: block;\n  max-width: 100%;\n  box-shadow: ${props => (props.selected ? \"0 0 0 2px blue;\" : \"none\")};\n`;\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport { Image } from \"../components/Image\";\n\nexport const ImageNode = props => {\n  const { node, attributes, children } = props;\n  return <Image {...attributes} src={props.src} />;\n};\n","import React from \"react\";\nimport Html from \"slate-html-serializer\";\n\nconst rules = [\n  {\n    serialize: (obj, children) => {\n      if (obj.object == \"block\") {\n        switch (obj.type) {\n          case \"code\":\n            return (\n              <pre>\n                <code className=\"exec\">{children}</code>\n              </pre>\n            );\n          case \"nonexecutable-code\":\n            return (\n              <pre>\n                <code>{children}</code>\n              </pre>\n            );\n          case \"sample-output\":\n            return (\n              <pre>\n                <samp>{children}</samp>\n              </pre>\n            );\n          case \"image\":\n            return <img src={obj.data.get(\"src\")} />;\n          case \"paragraph\":\n            return <p>{children}</p>;\n          case \"heading-1\":\n            return <h1>{children}</h1>;\n          case \"heading-2\":\n            return <h2>{children}</h2>;\n          case \"ul-list\":\n            return <ul>{children}</ul>;\n          case \"ol-list\":\n            return <ol>{children}</ol>;\n          case \"list-item\":\n            return <li>{children}</li>;\n          case \"table\":\n            return <table>{children}</table>;\n          case \"table_row\":\n            return <tr>{children}</tr>;\n          case \"table_cell\":\n            return <td>{children}</td>;\n          default:\n            return <p>{children}</p>;\n        }\n      }\n    }\n  },\n  {\n    serialize: (obj, children) => {\n      if (obj.object == \"mark\") {\n        switch (obj.type) {\n          case \"bold\":\n            return <strong>{children}</strong>;\n          case \"italic\":\n            return <em>{children}</em>;\n          case \"code\":\n            return <code>{children}</code>;\n        }\n      }\n    }\n  }\n];\n\n// Create a new serializer instance with our `rules` from above.\nconst htmlSerializer = new Html({ rules });\n\nexport default htmlSerializer;\n","import React, { useState } from \"react\";\nimport styled from \"styled-components\";\nimport htmlSerializer from \"./serializers/HtmlSerializer\";\nimport pretty from \"pretty\";\nimport { ExportToolbar } from \"./toolbars/ExportToolbar\";\n\nexport const viewerContent = (editor, viewMode) => {\n  if (!editor) {\n    return \"\";\n  }\n\n  if (viewMode === \"HTML\") {\n    return pretty(htmlSerializer.serialize(editor.value));\n  } else {\n    return JSON.stringify(editor.value.toJSON(), null, 4);\n  }\n};\n\nconst Viewer = props => {\n  const { editor } = props;\n\n  const [viewMode, setViewMode] = useState(\"HTML\");\n  let content = viewerContent(editor, viewMode);\n\n  return (\n    <ViewerWrapper>\n      <ExportToolbar\n        editor={editor}\n        viewMode={viewMode}\n        setViewMode={setViewMode}\n      />\n      <pre>{content}</pre>\n    </ViewerWrapper>\n  );\n};\n\nconst ViewerWrapper = styled.div`\n  position: relative;\n  padding: 10px;\n`;\n\nexport default Viewer;\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport { InlineButton } from \"../components/Buttons\";\nimport { viewerContent } from \"../Viewer\";\n\nconst copyToClipboard = string => {\n  const el = document.createElement(\"textarea\");\n  el.value = string;\n  document.body.appendChild(el);\n  el.select();\n  document.execCommand(\"copy\");\n  document.body.removeChild(el);\n};\n\nexport const ExportToolbar = props => {\n  const { editor, setViewMode, viewMode } = props;\n  return (\n    <ExportToolbarWrapper>\n      <InlineButton onClick={() => setViewMode(\"HTML\")}>HTML</InlineButton>\n      <InlineButton\n        onClick={() => {\n          setViewMode(\"JSON\");\n        }}\n      >\n        JSON\n      </InlineButton>\n      <InlineButton\n        onClick={() => {\n          const content = viewerContent(editor, viewMode);\n          copyToClipboard(content);\n          alert(`Copied ${viewMode} to clipboard!`);\n        }}\n      >\n        Copy to Clipboard\n      </InlineButton>\n    </ExportToolbarWrapper>\n  );\n};\n\nconst ExportToolbarWrapper = styled.div`\n  display: absolute;\n  top: 0;\n  right: 0;\n`;\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport { Editor } from \"slate-react\";\nimport { Value, Block } from \"slate\";\nimport { BoldMark } from \"./marks/BoldMark\";\nimport { boldPlugin } from \"./plugins/boldPlugin\";\nimport { CodeMark } from \"./marks/CodeMark\";\nimport { codeNodePlugin, codeMarkPlugin } from \"./plugins/codePlugin\";\nimport { FormatToolbar } from \"./toolbars/FormatToolBar\";\nimport { ItalicMark } from \"./marks/ItalicMark\";\nimport { BlocksToolbar } from \"./toolbars/BlocksToolbar\";\nimport { ImageNode } from \"./nodes/ImageNode\";\nimport SoftBreak from \"slate-soft-break\";\nimport EditList from \"slate-edit-list\";\n\nimport DeepTable from \"slate-deep-table\";\nimport { listPlugin } from \"./plugins/listPlugin\";\nimport { ExportToolbar } from \"./toolbars/ExportToolbar\";\nimport Viewer from \"./Viewer\";\nimport styled from \"styled-components\";\n\nconst initialValue = Value.fromJSON({\n  document: {\n    nodes: [\n      {\n        object: \"block\",\n        type: \"paragraph\",\n        nodes: [\n          {\n            object: \"text\",\n            leaves: [\n              {\n                text: \"A line of text in a paragraph.\"\n              }\n            ]\n          }\n        ]\n      }\n    ]\n  }\n});\n\nconst schema = {\n  // This section is need for the image upload functionality, if this is not there, then we cannot add anything after an image.\n  document: {\n    last: { type: \"paragraph\" },\n    normalize: (editor, { code, node, child }) => {\n      switch (code) {\n        case \"last_child_type_invalid\": {\n          const paragraph = Block.create(\"paragraph\");\n          return editor.insertNodeByKey(node.key, node.nodes.size, paragraph);\n        }\n      }\n    }\n  },\n  blocks: {\n    image: {\n      isVoid: true\n    }\n  }\n};\n\nconst plugins = [\n  SoftBreak({\n    shift: true\n  }),\n  DeepTable(),\n  listPlugin(),\n  codeNodePlugin()\n];\n\nclass App extends Component {\n  // Set the initial value when the app is first constructed.\n\n  state = {\n    value: initialValue\n  };\n\n  // On change, update the app's React state with the new editor value.\n  onChange = ({ value }) => {\n    window.content = value.toJSON();\n\n    this.setState({ value });\n  };\n\n  renderMark = (props, editor, next) => {\n    switch (props.mark.type) {\n      case \"bold\":\n        return <BoldMark {...props} {...props.attributes} />;\n      case \"italic\":\n        return <ItalicMark {...props} {...props.attributes} />;\n      case \"code\":\n        return <CodeMark {...props} {...props.attributes} />;\n      default:\n        return next();\n    }\n  };\n  renderNode = (props, editor, next) => {\n    const { attributes, node, children, isFocused } = props;\n    switch (node.type) {\n      case \"image\":\n        const src = node.data.get(\"src\");\n        console.log(\"Image source is \", src);\n        return <ImageNode src={src} selected={isFocused} {...attributes} />;\n      case \"heading-1\":\n        return <h1 {...attributes}>{children}</h1>;\n      case \"heading-2\":\n        return <h2 {...attributes}>{children}</h2>;\n      default:\n        return next();\n    }\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <FormatToolbar editor={this.editor} />\n        <BlocksToolbar editor={this.editor} onChange={this.onChange} />\n        <Layout>\n          <Editor\n            plugins={plugins}\n            value={this.state.value}\n            onChange={this.onChange}\n            renderMark={this.renderMark}\n            renderNode={this.renderNode}\n            schema={schema}\n            ref={editor => (this.editor = editor)}\n          />\n          <Viewer editor={this.editor} />\n        </Layout>\n      </div>\n    );\n  }\n}\n\nconst Layout = styled.div`\n  display: grid;\n  grid-template-columns: 50% 50%;\n  grid-column-gap: 50px;\n`;\n\nexport default App;\n","import React from \"react\";\n\nexport const listPlugin = options => {\n  return {\n    commands: {\n      insertUnorderedList: editor => {\n        editor\n          .setBlocks(\"list-item\")\n          .wrapBlock(\"ul-list\")\n          .focus();\n      },\n      insertOrderedList: editor => {\n        editor\n          .setBlocks(\"list-item\")\n          .wrapBlock(\"ol-list\")\n          .focus();\n      },\n      unwrapList: editor => {\n        editor\n          .unwrapBlock(\"ul-list\")\n          .unwrapBlock(\"ol-list\")\n          .focus();\n      }\n    },\n    queries: {\n      isList: editor => {\n        return editor.value.blocks.some(node => node.type == \"list-item\");\n      },\n      isParagraph: editor => {\n        return editor.value.blocks.some(node => node.type == \"paragraph\");\n      },\n      isBlockEmpty: editor => {\n        return editor.value.endText && editor.value.endText.text === \"\";\n      }\n    },\n    renderNode: (props, editor, next) => {\n      const { attributes, node, children, isFocused } = props;\n      switch (node.type) {\n        case \"ul-list\":\n          return <ul {...attributes}>{children}</ul>;\n        case \"ol-list\":\n          return <ol {...attributes}>{children}</ol>;\n        case \"list-item\":\n          return <li {...props.attributes}>{children}</li>;\n        default:\n          return next();\n      }\n    },\n    onKeyDown: (event, editor, next) => {\n      if (editor.isList() && editor.isBlockEmpty() && event.keyCode === 13) {\n        event.preventDefault();\n        editor\n          .setBlocks(\"paragraph\")\n          .unwrapList()\n          .focus();\n      } else {\n        return next();\n      }\n    }\n  };\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"editor\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}